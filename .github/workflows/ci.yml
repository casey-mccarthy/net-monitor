name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt -- --check

  # Run clippy linter
  clippy:
    name: Clippy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libasound2-dev
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run clippy
        run: |
          # Run clippy and capture warnings
          cargo clippy --all-targets --all-features -- -W warnings 2>&1 | tee clippy-output.txt
          
          # Check for errors (not warnings)
          if grep -q "error:" clippy-output.txt; then
            echo "Clippy found errors!"
            exit 1
          fi
          
          # Count warnings for informational purposes
          WARNING_COUNT=$(grep -c "warning:" clippy-output.txt || true)
          echo "Clippy found $WARNING_COUNT warnings (currently allowed)"

  # Run tests
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libasound2-dev
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test
        # Note: Excludes network-tests feature to avoid flaky external dependencies in CI

  # Build check for all targets
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            name: Windows x64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: Linux x64
          - target: x86_64-apple-darwin
            os: macos-13  # Use Intel runner for x86_64 target
            name: macOS x64 (Intel)
          - target: aarch64-apple-darwin
            os: macos-latest  # Use latest (ARM64) runner for ARM64 target
            name: macOS ARM64 (Apple Silicon)
    
    runs-on: ${{ matrix.os }}
    name: Build - ${{ matrix.name }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxi-dev \
            libgl1-mesa-dev \
            libasound2-dev
          
          # Install cross-compilation dependencies for Windows target
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            sudo apt-get install -y gcc-mingw-w64-x86-64
          fi
      
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build
        run: |
          echo "Building for target: ${{ matrix.target }} on runner: ${{ runner.os }}"
          echo "Runner architecture: $(uname -m)"
          rustc --version
          rustup show
          
          # Build with verbose output for better debugging
          cargo build --release --target ${{ matrix.target }} --verbose
      
      - name: Verify binary exists
        run: |
          echo "Checking for built binary..."
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            if [ -f "target/${{ matrix.target }}/release/net-monitor.exe" ]; then
              echo "✓ Binary found: target/${{ matrix.target }}/release/net-monitor.exe"
              ls -la target/${{ matrix.target }}/release/net-monitor.exe
              file target/${{ matrix.target }}/release/net-monitor.exe
            else
              echo "✗ Binary not found: target/${{ matrix.target }}/release/net-monitor.exe"
              echo "Contents of release directory:"
              ls -la target/${{ matrix.target }}/release/ || echo "Release directory doesn't exist"
              exit 1
            fi
          else
            if [ -f "target/${{ matrix.target }}/release/net-monitor" ]; then
              echo "✓ Binary found: target/${{ matrix.target }}/release/net-monitor"
              ls -la target/${{ matrix.target }}/release/net-monitor
              file target/${{ matrix.target }}/release/net-monitor
            else
              echo "✗ Binary not found: target/${{ matrix.target }}/release/net-monitor"
              echo "Contents of release directory:"
              ls -la target/${{ matrix.target }}/release/ || echo "Release directory doesn't exist"
              exit 1
            fi
          fi

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  # Check dependencies
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check dependencies
        run: |
          cargo tree --duplicate
          cargo outdated --exit-code 1 || true

  # All checks must pass
  ci-success:
    name: CI Success
    if: ${{ always() }}
    needs: [fmt, clippy, test, build, security-audit, dependency-check]
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs succeeded"
          fi